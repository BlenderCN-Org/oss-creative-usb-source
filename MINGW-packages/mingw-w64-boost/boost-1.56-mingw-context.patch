diff -rcN boost-1.56-vanilla/libs/context/build/Jamfile.v2 boost-1.56-patched/libs/context/build/Jamfile.v2
*** boost-1.56-vanilla/libs/context/build/Jamfile.v2	2014-07-21 07:59:27.000000000 +0200
--- boost-1.56-patched/libs/context/build/Jamfile.v2	2014-10-01 19:02:57.719800549 +0200
***************
*** 27,35 ****
  local rule default_binary_format ( )
  {
      local tmp = elf ;
!     if [ os.name ] = "MACOSX" { tmp = mach-o ; }
!     if [ os.name ] = "NT" { tmp = pe ; }
!     if [ os.name ] = "AIX" { tmp = xcoff ; }
      return $(tmp) ;
  }
  
--- 27,36 ----
  local rule default_binary_format ( )
  {
      local tmp = elf ;
! #    if [ os.name ] = "MACOSX" { tmp = mach-o ; }
! #    if [ os.name ] = "NT" { tmp = pe ; }
! #    if [ os.name ] = "AIX" { tmp = xcoff ; }
!     tmp = pe ;
      return $(tmp) ;
  }
  
***************
*** 46,54 ****
  local rule default_abi ( )
  {
      local tmp = sysv ;
!     if [ os.name ] = "NT" { tmp = ms ; }
!     else if [ os.platform ] = "ARM" { tmp = aapcs ; }
!     else if [ os.platform ] = "MIPS" { tmp = o32 ; }
      return $(tmp) ;
  }
  
--- 47,56 ----
  local rule default_abi ( )
  {
      local tmp = sysv ;
! #    if [ os.name ] = "NT" { tmp = ms ; }
! #    else if [ os.platform ] = "ARM" { tmp = aapcs ; }
! #    else if [ os.platform ] = "MIPS" { tmp = o32 ; }
!     tmp = ms ;
      return $(tmp) ;
  }
  
***************
*** 587,592 ****
--- 589,605 ----
     ;
  
  alias asm_context_sources
+    : asm/make_i386_ms_pe_gas.S
+      asm/jump_i386_ms_pe_gas.S
+      dummy.cpp
+    : <abi>ms
+      <address-model>32
+      <architecture>x86
+      <binary-format>pe
+      <toolset>gcc
+    ;
+ 
+ alias asm_context_sources
     : asm/make_i386_ms_pe_masm.asm
       asm/jump_i386_ms_pe_masm.asm
       dummy.cpp
***************
*** 721,726 ****
--- 734,750 ----
     ;
  
  alias asm_context_sources
+    : asm/make_x86_64_ms_pe_gas.S
+      asm/jump_x86_64_ms_pe_gas.S
+      dummy.cpp
+    : <abi>ms
+      <address-model>64
+      <architecture>x86
+      <binary-format>pe
+      <toolset>gcc
+    ;
+ 
+ alias asm_context_sources
     : asm/make_x86_64_ms_pe_masm.asm
       asm/jump_x86_64_ms_pe_masm.asm
       dummy.cpp
diff -rcN boost-1.56-vanilla/libs/context/src/asm/jump_i386_ms_pe_gas.S boost-1.56-patched/libs/context/src/asm/jump_i386_ms_pe_gas.S
*** boost-1.56-vanilla/libs/context/src/asm/jump_i386_ms_pe_gas.S	1970-01-01 01:00:00.000000000 +0100
--- boost-1.56-patched/libs/context/src/asm/jump_i386_ms_pe_gas.S	2014-10-06 12:57:06.000000000 +0200
***************
*** 0 ****
--- 1,141 ----
+ /*
+             Copyright Oliver Kowalke 2009.
+             Copyright Thomas Sailer 2013.
+    Distributed under the Boost Software License, Version 1.0.
+       (See accompanying file LICENSE_1_0.txt or copy at
+             http://www.boost.org/LICENSE_1_0.txt)
+ */
+ 
+ /* 
+    ---------------------------------------------------------------------------------
+    |    0    |    1    |    2    |    3    |    4    |    5    |    6    |    7    |
+    ---------------------------------------------------------------------------------
+    |    0h   |   04h   |   08h   |   0ch   |   010h  |   014h  |   018h  |   01ch  |
+    ---------------------------------------------------------------------------------
+    | fc_mxcsr|fc_x87_cw| fc_strg |fc_deallo|  limit  |   base  |  fc_seh |   EDI   |
+    ---------------------------------------------------------------------------------
+    ---------------------------------------------------------------------------------
+    |    8    |    9    |   10    |    11   |    12   |    13   |    14   |    15   |
+    ---------------------------------------------------------------------------------
+    |   020h  |  024h   |  028h   |   02ch  |   030h  |   034h  |   038h  |   03ch  |
+    ---------------------------------------------------------------------------------
+    |   ESI   |   EBX   |   EBP   |   EIP   |   EXIT  |         | SEH NXT |SEH HNDLR|
+    --------------------------------------------------------------------------------- 
+ */
+ 
+ .file	"jump_i386_ms_pe_gas.S"
+ .text
+ .p2align 4,,15
+ .globl	_jump_fcontext
+ .def	_jump_fcontext;	.scl	2;	.type	32;	.endef
+ _jump_fcontext:
+ 
+ /* fourth arg of jump_fcontext() == flag indicating preserving FPU */
+     movl    0x10(%esp),%ecx
+     pushl   %ebp
+     pushl   %ebx
+     pushl   %esi
+     pushl  %edi
+ 
+ /* load NT_TIB into ECX */
+     movl    %fs:0x18,%EDX
+ 
+ /* load current SEH exception list */
+     movl    (%edx),%eax
+     pushl   %eax
+ 
+ /* load current stack base */
+     movl    0x4(%edx),%eax
+     pushl   %eax
+ 
+ /* load current stack limit */
+     movl    0x8(%edx),%eax
+     pushl   %eax
+ 
+ /* load current deallocation stack */
+     movl    0xe0c(%edx),%eax
+     pushl   %eax
+ 
+ /* load fiber local storage */
+     movl    0x10(%edx),%eax
+     pushl   %eax
+ 
+ /* prepare stack for FPU */
+     leal   -0x8(%esp),%esp
+ 
+ /* test for flag preserve_fpu */
+     testl   %ecx,%ecx
+     je     nxt1
+ 
+ /* save MMX control- and status-word */
+     stmxcsr (%esp)
+ 
+ /* save x87 control-word */
+     fnstcw 0x4(%esp)
+ 
+ nxt1:
+ /* first arg of jump_fcontext() == context jumping from */
+     movl    0x30(%esp),%eax
+ 
+ /* store ESP (pointing to context-data) in EAX */
+     movl    %esp,(%eax)
+ 
+ /* second arg of jump_fcontext() == context jumping to */
+     movl    0x34(%esp),%edx
+ 
+ /* third arg of jump_fcontext() == value to be returned after jump */
+     movl    0x38(%esp),%eax
+ 
+ /* restore ESP (pointing to context-data) from EDX */
+     movl    %edx,%esp
+ 
+ /* test for flag preserve_fpu */
+     testl   %ecx,%ecx
+     je     nxt2
+ 
+ /* restore MMX control- and status-word */
+     ldmxcsr (%esp)
+ 
+ /* restore x87 control-word */
+     fldcw  0x4(%esp)
+ 
+ nxt2:
+ /* prepare stack for FPU */
+     leal    0x8(%esp),%esp
+ 
+ /* load NT_TIB into ECX */
+     movl    %fs:0x18,%edx
+ 
+ /* restore fiber local storage */
+     popl    %ecx
+     movl    %ecx,0x10(%edx)
+ 
+ /* restore current deallocation stack */
+     popl    %ecx
+     movl    %ecx,0xe0c(%edx)
+ 
+ /* restore current stack limit */
+     popl    %ecx
+     movl    %ecx,0x8(%edx)
+ 
+ /* restore current stack base */
+     popl    %ecx
+     movl    %ecx,0x4(%edx)
+ 
+ /* restore current SEH exception list */
+     popl    %ecx
+     movl    %ecx,(%edx)
+     popl    %edi
+     popl    %esi
+     popl    %ebx
+     popl    %ebp
+ 
+ /* restore return-address */
+     popl    %edx
+ 
+ /* use value in EAX as return-value after jump */
+ /* use value in EAX as first arg in context function */
+     movl    %eax,0x4(%esp)
+ 
+ /* indirect jump to context */
+     jmpl    *%edx
diff -rcN boost-1.56-vanilla/libs/context/src/asm/jump_x86_64_ms_pe_gas.S boost-1.56-patched/libs/context/src/asm/jump_x86_64_ms_pe_gas.S
*** boost-1.56-vanilla/libs/context/src/asm/jump_x86_64_ms_pe_gas.S	1970-01-01 01:00:00.000000000 +0100
--- boost-1.56-patched/libs/context/src/asm/jump_x86_64_ms_pe_gas.S	2014-10-06 12:45:38.000000000 +0200
***************
*** 0 ****
--- 1,212 ----
+ /*
+             Copyright Oliver Kowalke 2009.
+             Copyright Thomas Sailer 2013.
+    Distributed under the Boost Software License, Version 1.0.
+       (See accompanying file LICENSE_1_0.txt or copy at
+             http://www.boost.org/LICENSE_1_0.txt)
+ */
+ 
+ /*
+   ----------------------------------------------------------------------------------
+   |    0    |    1    |                                                            |
+   ----------------------------------------------------------------------------------
+   |   0x0   |   0x4   |                                                            |
+   ----------------------------------------------------------------------------------
+   |    <indicator>    |                                                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    2    |    3    |    4     |    5    |    6    |    7    |    8    |    9    |
+   ----------------------------------------------------------------------------------
+   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |   0x20  |   0x24  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |   10    |   11    |    12    |    13   |    14   |    15   |    16   |    17   |
+   ----------------------------------------------------------------------------------
+   |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |   0x40  |   0x44  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    18   |    19   |    20   |    21    |    22   |    23   |    24   |    25   |
+   ----------------------------------------------------------------------------------
+   |   0x48  |   0x4c  |   0x50  |   0x54   |   0x58  |   0x5c  |  0x60   |   0x64  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    26   |    27   |    28    |   29    |    30   |    31   |    32   |    33   |
+   ----------------------------------------------------------------------------------
+   |   0x68  |   0x6c  |   0x70   |   0x74  |   0x78  |   0x7c  |   0x80  |   0x84  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    34    |   35   |    36    |    37   |    38   |    39   |    40   |    41   |
+   ----------------------------------------------------------------------------------
+   |   0x88   |  0x8c  |   0x90   |   0x94  |   0x98  |   0x9c  |   0xa0  |   0xa4  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    42   |    43   |    44    |    45   |    46   |    47   |    48   |    49   |
+   ----------------------------------------------------------------------------------
+   |   0xa8  |   0xac  |   0xb0   |   0xb4  |   0xb8  |   0xbc  |   0xc0  |   0xc4  |
+   ----------------------------------------------------------------------------------
+   | fc_mxcsr|fc_x87_cw|     <alignment>    |      fbr_strg     |      fc_dealloc   |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    50   |   51    |    52    |    53   |    54   |    55   |    56   |    57   |
+   ----------------------------------------------------------------------------------
+   |   0xc8  |  0xcc   |   0xd0   |   0xd4  |   0xd8  |   0xdc  |   0xe0  |   0xe4  |
+   ----------------------------------------------------------------------------------
+   |      limit        |       base         |      R12          |        R13        |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    58   |    59   |    60   |    61    |    62   |    63   |    64   |    65   |
+   ----------------------------------------------------------------------------------
+   |   0xe8  |   0xec  |   0xf0  |   0xf4   |   0xf8  |   0xfc  |  0x100  |  0x104  |
+   ----------------------------------------------------------------------------------
+   |        R14        |        R15         |       RDI         |       RSI         |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    66   |   67    |    68    |   69    |    70   |  71     |    72   |    73   |
+   ----------------------------------------------------------------------------------
+   |  0x108  |  0x10c  |  0x110   |  0x114  |  0x118  |  0x11c  |  0x120  |  0x124  |
+   ----------------------------------------------------------------------------------
+   |        RBX        |         RBP        |        RIP        |       EXIT        |
+   ----------------------------------------------------------------------------------
+ */
+ 
+ .file	"jump_x86_64_ms_pe_gas.S"
+ .text
+ .p2align 4,,15
+ .globl	jump_fcontext
+ .def	jump_fcontext;	.scl	2;	.type	32;	.endef
+ .seh_proc	jump_fcontext
+ jump_fcontext:
+ .seh_endprologue
+     push   %rbp
+     push   %rbx
+     push   %rsi
+     push   %rdi
+     push   %r15
+     push   %r14
+     push   %r13
+     push   %r12
+ /* load NT_TIB */
+     mov    %gs:0x30,%r10
+ /* save current stack base */
+     mov    0x8(%r10),%rax
+     push   %rax
+ /* save current stack limit */
+     mov    0x10(%r10),%rax
+     push   %rax
+ /* save current deallocation stack */
+     mov    0x1478(%r10),%rax
+     push   %rax
+ /* save fiber local storage */
+     mov    0x18(%r10),%rax
+     push   %rax
+ /* prepare stack for FPU */
+     lea    -0xa8(%rsp),%rsp
+ /* test for flag preserve_fpu */
+     test   %r9,%r9
+     je     nxt1
+ 
+ /* save MMX control- and status-word */
+     stmxcsr 0xa0(%rsp)
+ /* save x87 control-word */
+     fnstcw 0xa4(%rsp)
+ 
+ /* save XMM storage */
+     movaps %xmm6,(%rsp)
+     movaps %xmm7,0x10(%rsp)
+     movaps %xmm8,0x20(%rsp)
+     movaps %xmm9,0x30(%rsp)
+     movaps %xmm10,0x40(%rsp)
+     movaps %xmm11,0x50(%rsp)
+     movaps %xmm12,0x60(%rsp)
+     movaps %xmm13,0x70(%rsp)
+     movaps %xmm14,0x80(%rsp)
+     movaps %xmm15,0x90(%rsp)
+ 
+ nxt1:
+ /* set R10 to zero */
+     xor    %r10,%r10
+ /* set indicator */
+     push   %r10
+ /* store RSP (pointing to context-data) in RCX */
+     mov    %rsp,(%rcx)
+ /* restore RSP (pointing to context-data) from RDX */
+     mov    %rdx,%rsp
+ /* load indicator */
+     pop    %r10
+ /* test for flag preserve_fpu */
+     test   %r9,%r9
+     je     nxt2
+ 
+ /* restore MMX control- and status-word */
+     ldmxcsr 0xa0(%rsp)
+ /* save x87 control-word */
+     fldcw  0xa4(%rsp)
+ 
+ /* restore XMM storage */
+     movaps (%rsp),%xmm6
+     movaps 0x10(%rsp),%xmm7
+     movaps 0x20(%rsp),%xmm8
+     movaps 0x30(%rsp),%xmm9
+     movaps 0x40(%rsp),%xmm10
+     movaps 0x50(%rsp),%xmm11
+     movaps 0x60(%rsp),%xmm12
+     movaps 0x70(%rsp),%xmm13
+     movaps 0x80(%rsp),%xmm14
+     movaps 0x90(%rsp),%xmm15
+ 
+ nxt2:
+ /* set offset of stack */
+     mov    $0xa8,%rcx
+ /* test for indicator */
+     test   %r10,%r10
+     je     nxt3
+     add    $0x8,%rcx
+ 
+ nxt3:    
+ /* prepare stack for FPU */
+     lea    (%rsp,%rcx,1),%rsp
+ 
+ /* load NT_TIB */
+     mov    %gs:0x30,%r10
+ 
+ /* restore fiber local storage */
+     pop    %rax
+ /* restore deallocation stack */
+     mov    %rax,0x18(%r10)
+     pop    %rax
+ /* restore stack limit */
+     mov    %rax,0x1478(%r10)
+     pop    %rax
+ /* restore stack base */
+     mov    %rax,0x10(%r10)
+     pop    %rax
+     mov    %rax,0x8(%r10)
+     pop    %r12
+     pop    %r13
+     pop    %r14
+     pop    %r15
+     pop    %rdi
+     pop    %rsi
+     pop    %rbx
+     pop    %rbp
+ 
+ /* restore return-address */
+     pop    %r10
+ /* use third arg as return-value after jump */
+     mov    %r8,%rax
+ /* use third arg as first arg in context function */
+     mov    %r8,%rcx
+ 
+ /* indirect jump to context */
+     jmpq   *%r10
+ .seh_endproc
diff -rcN boost-1.56-vanilla/libs/context/src/asm/make_i386_ms_pe_gas.S boost-1.56-patched/libs/context/src/asm/make_i386_ms_pe_gas.S
*** boost-1.56-vanilla/libs/context/src/asm/make_i386_ms_pe_gas.S	1970-01-01 01:00:00.000000000 +0100
--- boost-1.56-patched/libs/context/src/asm/make_i386_ms_pe_gas.S	2014-10-01 18:54:55.000000000 +0200
***************
*** 0 ****
--- 1,126 ----
+ /*
+             Copyright Oliver Kowalke 2009.
+             Copyright Thomas Sailer 2013.
+    Distributed under the Boost Software License, Version 1.0.
+       (See accompanying file LICENSE_1_0.txt or copy at
+             http://www.boost.org/LICENSE_1_0.txt)
+ */
+ 
+ /* 
+    ---------------------------------------------------------------------------------
+    |    0    |    1    |    2    |    3    |    4    |    5    |    6    |    7    |
+    ---------------------------------------------------------------------------------
+    |    0h   |   04h   |   08h   |   0ch   |   010h  |   014h  |   018h  |   01ch  |
+    ---------------------------------------------------------------------------------
+    | fc_mxcsr|fc_x87_cw| fc_strg |fc_deallo|  limit  |   base  |  fc_seh |   EDI   |
+    ---------------------------------------------------------------------------------
+    ---------------------------------------------------------------------------------
+    |    8    |    9    |   10    |    11   |    12   |    13   |    14   |    15   |
+    ---------------------------------------------------------------------------------
+    |   020h  |  024h   |  028h   |   02ch  |   030h  |   034h  |   038h  |   03ch  |
+    ---------------------------------------------------------------------------------
+    |   ESI   |   EBX   |   EBP   |   EIP   |   EXIT  |         | SEH NXT |SEH HNDLR|
+    --------------------------------------------------------------------------------- 
+ */
+ 
+ .file	"make_i386_ms_pe_gas.S"
+ .text
+ .p2align 4,,15
+ .globl	_make_fcontext
+ .def	_make_fcontext;	.scl	2;	.type	32;	.endef
+ _make_fcontext:
+ .def	__exit;	.scl	2;	.type	32;	.endef  /* standard C library function */
+ /* first arg of make_fcontext() == top of context-stack */
+     movl    0x4(%esp),%eax
+ /* reserve space for first argument of context-function */
+ /* eax might already point to a 16byte border */
+     leal    -0x8(%eax),%eax
+ /* shift address in EAX to lower 16 byte boundary */
+ 
+     andl    $0xfffffff0,%eax
+ /* reserve space for context-data on context-stack */
+ /* size for fc_mxcsr .. EIP + return-address for context-function */
+ /* on context-function entry: (ESP -0x4) % 8 == 0 */
+ /* additional space is required for SEH */
+     leal    -0x3c(%eax),%eax
+    
+ /* first arg of make_fcontext() == top of context-stack */
+     movl    0x4(%esp),%ecx
+ 
+ /* save top address of context stack as 'base' */
+     movl    %ecx,0x14(%eax)
+ 
+ /* second arg of make_fcontext() == size of context-stack */
+     movl    0x8(%esp),%edx
+ 
+ /* negate stack size for LEA instruction (== substraction) */
+     negl    %edx
+ 
+ /* compute bottom address of context stack (limit) */
+     leal    (%edx,%ecx,1),%ecx
+ 
+ /* save bottom address of context-stack as 'limit' */
+     movl    %ecx,0x10(%eax)
+ 
+ /* save bottom address of context-stack as 'dealloction stack' */
+     movl    %ecx,0xc(%eax)
+ 
+ /* third arg of make_fcontext() == address of context-function */
+     movl    0xc(%esp),%ecx
+     movl    %ecx,0x2c(%eax)
+ 
+ /* save MMX control- and status-word */
+     stmxcsr (%eax)
+ 
+ /* save x87 control-word */
+     fnstcw 0x4(%eax)
+ 
+ /* compute abs address of label finish */
+     movl    $finish,%ecx
+     
+ /* save address of finish as return-address for context-function */
+ /* will be entered after context-function returns */
+     movl    %ecx,0x30(%eax)
+ 
+ /* load NT_TIB into ECX */
+     movl    %fs:0x0,%ecx
+     
+ /* traverse current seh chain to get the last exception handler installed by Windows */
+ /* note that on Windows Server 2008 and 2008 R2, SEHOP is activated by default */
+ /* the exception handler chain is tested for the presence of ntdll.dll!FinalExceptionHandler */
+ /* at its end by RaiseException all seh-handlers are disregarded if not present and the */
+ /* program is aborted */
+ walk:
+ /* load 'next' member of current SEH into EDX */
+     movl    (%ecx),%edx
+ /* test if 'next' of current SEH is last (== 0xffffffff) */
+     incl    %edx
+     je     found
+     decl    %edx
+ /* exchange content; ECX contains address of next SEH */
+     xchgl   %edx,%ecx 
+ /* inspect next SEH */
+     jmp    walk
+ found:            
+ /* load 'handler' member of SEH == address of last SEH handler installed by Windows */
+     movl    0x4(%ecx),%ecx
+ /* save address in ECX as SEH handler for context */
+     movl    %ecx,0x3c(%eax)
+ /* set ECX to -1 */
+     movl    $0xffffffff,%ecx
+ /* save ECX as next SEH item */
+     movl    %ecx,0x38(%eax)
+ /* load address of next SEH item */
+     leal    0x38(%eax),%ecx
+ /* save next SEH */
+     movl    %ecx,0x18(%eax)
+ /* return pointer to context-data */
+     ret    
+ 
+ finish:
+ /* exit code is zero */
+     xorl    %eax,%eax
+     movl    %eax,(%esp)
+ /* exit application */
+     call   _exit
+     hlt
diff -rcN boost-1.56-vanilla/libs/context/src/asm/make_x86_64_ms_pe_gas.S boost-1.56-patched/libs/context/src/asm/make_x86_64_ms_pe_gas.S
*** boost-1.56-vanilla/libs/context/src/asm/make_x86_64_ms_pe_gas.S	1970-01-01 01:00:00.000000000 +0100
--- boost-1.56-patched/libs/context/src/asm/make_x86_64_ms_pe_gas.S	2014-10-06 12:46:39.000000000 +0200
***************
*** 0 ****
--- 1,159 ----
+ /*
+             Copyright Oliver Kowalke 2009.
+             Copyright Thomas Sailer 2013.
+    Distributed under the Boost Software License, Version 1.0.
+       (See accompanying file LICENSE_1_0.txt or copy at
+             http://www.boost.org/LICENSE_1_0.txt)
+ */
+ 
+ /*
+   ----------------------------------------------------------------------------------
+   |    0    |    1    |                                                            |
+   ----------------------------------------------------------------------------------
+   |   0x0   |   0x4   |                                                            |
+   ----------------------------------------------------------------------------------
+   |    <indicator>    |                                                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    2    |    3    |    4     |    5    |    6    |    7    |    8    |    9    |
+   ----------------------------------------------------------------------------------
+   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |   0x20  |   0x24  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |   10    |   11    |    12    |    13   |    14   |    15   |    16   |    17   |
+   ----------------------------------------------------------------------------------
+   |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |   0x40  |   0x44  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    18   |    19   |    20   |    21    |    22   |    23   |    24   |    25   |
+   ----------------------------------------------------------------------------------
+   |   0x48  |   0x4c  |   0x50  |   0x54   |   0x58  |   0x5c  |  0x60   |   0x64  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    26   |    27   |    28    |   29    |    30   |    31   |    32   |    33   |
+   ----------------------------------------------------------------------------------
+   |   0x68  |   0x6c  |   0x70   |   0x74  |   0x78  |   0x7c  |   0x80  |   0x84  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    34    |   35   |    36    |    37   |    38   |    39   |    40   |    41   |
+   ----------------------------------------------------------------------------------
+   |   0x88   |  0x8c  |   0x90   |   0x94  |   0x98  |   0x9c  |   0xa0  |   0xa4  |
+   ----------------------------------------------------------------------------------
+   |                          SEE registers (XMM6-XMM15)                            |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    42   |    43   |    44    |    45   |    46   |    47   |    48   |    49   |
+   ----------------------------------------------------------------------------------
+   |   0xa8  |   0xac  |   0xb0   |   0xb4  |   0xb8  |   0xbc  |   0xc0  |   0xc4  |
+   ----------------------------------------------------------------------------------
+   | fc_mxcsr|fc_x87_cw|     <alignment>    |      fbr_strg     |      fc_dealloc   |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    50   |   51    |    52    |    53   |    54   |    55   |    56   |    57   |
+   ----------------------------------------------------------------------------------
+   |   0xc8  |  0xcc   |   0xd0   |   0xd4  |   0xd8  |   0xdc  |   0xe0  |   0xe4  |
+   ----------------------------------------------------------------------------------
+   |      limit        |       base         |      R12          |        R13        |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    58   |    59   |    60   |    61    |    62   |    63   |    64   |    65   |
+   ----------------------------------------------------------------------------------
+   |   0xe8  |   0xec  |   0xf0  |   0xf4   |   0xf8  |   0xfc  |  0x100  |  0x104  |
+   ----------------------------------------------------------------------------------
+   |        R14        |        R15         |       RDI         |       RSI         |
+   ----------------------------------------------------------------------------------
+   ----------------------------------------------------------------------------------
+   |    66   |   67    |    68    |   69    |    70   |  71     |    72   |    73   |
+   ----------------------------------------------------------------------------------
+   |  0x108  |  0x10c  |  0x110   |  0x114  |  0x118  |  0x11c  |  0x120  |  0x124  |
+   ----------------------------------------------------------------------------------
+   |        RBX        |         RBP        |        RIP        |       EXIT        |
+   ----------------------------------------------------------------------------------
+ */
+ 
+ 
+ .file	"make_x86_64_ms_pe_gas.S"
+ .text
+ .p2align 4,,15
+ .globl	make_fcontext
+ 
+ .def	make_fcontext;	.scl	2;	.type	32;	.endef
+ /* generate function table entry in .pdata and unwind information in */
+ /* .xdata for a function's structured exception handling unwind behavior */
+ .seh_proc	make_fcontext
+ make_fcontext:
+ .seh_endprologue
+     
+ /* first arg of make_fcontext() == top of context-stack */
+     mov    %rcx,%rax
+ 
+ /* reserve 32byte shadow-space for context-function */
+     sub    $0x28,%rax
+ 
+ /* shift address in RAX to lower 16 byte boundary */
+ /* == pointer to fcontext_t and address of context stack */
+     and    $0xfffffffffffffff0,%rax
+ 
+ /* reserve space for context-data on context-stack */
+ /* size for fc_mxcsr .. RIP + return-address for context-function */
+ /* on context-function entry: (RSP -0x8) % 16 == 0 */
+     sub    $0x128,%rax
+ 
+ /* third arg of make_fcontext() == address of context-function */
+     mov    %r8,0x118(%rax)
+ 
+ /* first arg of make_fcontext() == top of context-stack */
+ /* save top address of context stack as 'base' */
+     mov    %rcx,0xd0(%rax)
+ 
+ /* second arg of make_fcontext() == size of context-stack */
+ /* negate stack size for LEA instruction (== substraction) */
+     neg    %rdx
+ 
+ /* compute bottom address of context stack (limit) */
+     lea    (%rdx,%rcx,1),%rcx
+ 
+ /* save bottom address of context stack as 'limit' */
+     mov    %rcx,0xc8(%rax)
+ /* save address of context stack limit as 'dealloction stack' */
+     mov    %rcx,0xc0(%rax)
+ 
+ /* save MMX control- and status-word */
+     stmxcsr 0xa8(%rax)
+ /* save x87 control-word */
+     fnstcw 0xac(%rax)
+ 
+ /* compute abs address of label finish */
+     leaq    finish(%rip), %rcx 
+ 
+ /* save address of finish as return-address for context-function */
+ /* will be entered after context-function returns */
+     mov    %rcx,0x120(%rax)
+ 
+ /* set indicator */   
+     mov    $0x1,%rcx
+     mov    %rcx,(%rax)
+ 
+ /* return pointer to context-data */
+     retq   
+ finish:
+ 
+ /* 32byte shadow-space for _exit() are */
+ /* already reserved by make_fcontext() */
+ /* exit code is zero */
+     xor    %rcx,%rcx
+ 
+ /* exit application */
+     callq  _exit
+     hlt    
+ .seh_endproc
+ 
+ .def	_exit;	.scl	2;	.type	32;	.endef  /* standard C library function */
diff -rcN boost-1.56-vanilla/libs/thread/build/Jamfile.v2 boost-1.56-patched/libs/thread/build/Jamfile.v2
*** boost-1.56-vanilla/libs/thread/build/Jamfile.v2	2014-08-03 20:58:54.000000000 +0200
--- boost-1.56-patched/libs/thread/build/Jamfile.v2	2014-10-01 19:02:57.719800549 +0200
***************
*** 134,140 ****
  local rule default_threadapi ( )
  {
      local api = pthread ;
!     if [ os.name ] = "NT" { api = win32 ; }
      return $(api) ;
  }
  
--- 134,141 ----
  local rule default_threadapi ( )
  {
      local api = pthread ;
!     #if [ os.name ] = "NT" { api = win32 ; }
!     api = win32 ;
      return $(api) ;
  }
  
-------------------------  *
+ *  |  0xf0   |  0xf4   |   0xf8   |  0xfc  |   0x100  |  0x104  |  0x108  |  0x10c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |                          SEE registers (XMM6-XMM15)                            |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |    68   |    69   |    70    |    71  |    72    |    73   |   74    |   75    |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |  0x110  |  0x114  |   0x118  |  0x11c |   0x120  |  0x124  |  0x128  |  0x12c  |  *
+ *  ----------------------------------------------------------------------------------  *
+ *  |                          SEE registers (XMM6-XMM15)                            |  *
+ *  ----------------------------------------------------------------------------------  *
+ *                                                                                      *
+ * *************************************************************************************/
+
+.file	"jump_x86_64_ms_pe_gas.S"
+.text
+.p2align 4,,15
+.globl	jump_fcontext
+.def	jump_fcontext;	.scl	2;	.type	32;	.endef
+.seh_proc	jump_fcontext
+jump_fcontext:
+.seh_endprologue
+    movq    %r12,       (%rcx)      /* save R12 */
+    movq    %r13,       0x08(%rcx)  /* save R13 */
+    movq    %r14,       0x10(%rcx)  /* save R14 */
+    movq    %r15,       0x18(%rcx)  /* save R15 */
+    movq    %rdi,       0x20(%rcx)  /* save RDI */
+    movq    %rsi,       0x28(%rcx)  /* save RSI */
+    movq    %rbx,       0x30(%rcx)  /* save RBX */
+    movq    %rbp,       0x38(%rcx)  /* save RBP */
+
+    movq    %gs:(0x30), %r10        /* load NT_TIB */
+    movq    0x08(%r10), %rax        /* load current stack base */
+    movq    %rax,       0x50(%rcx)  /* save current stack base */
+    movq    0x10(%r10), %rax        /* load current stack limit */
+    movq    %rax,       0x60(%rcx)  /* save current stack limit */
+    movq    0x18(%r10), %rax        /* load fiber local storage */
+    movq    %rax,       0x68(%rcx)  /* save fiber local storage */
+
+    testq   %r9,        %r9
+    je      1f
+
+    stmxcsr 0x70(%rcx)              /* save MMX control and status word */
+    fnstcw  0x74(%rcx)              /* save x87 control word */
+    /* save XMM storage */
+    /* save start address of SSE register block in R10 */
+    leaq    0x90(%rcx), %r10
+    /* shift address in R10 to lower 16 byte boundary */
+    /* == pointer to SEE register block */
+    andq    $-16,       %r10
+
+    movaps  %xmm6,      (%r10)
+    movaps  %xmm7,      0x10(%r10)
+    movaps  %xmm8,      0x20(%r10)
+    movaps  %xmm9,      0x30(%r10)
+    movaps  %xmm10,     0x40(%r10)
+    movaps  %xmm11,     0x50(%r10)
+    movaps  %xmm12,     0x60(%r10)
+    movaps  %xmm13,     0x70(%r10)
+    movaps  %xmm14,     0x80(%r10)
+    movaps  %xmm15,     0x90(%r10)
+
+    ldmxcsr 0x70(%rdx)              /* restore MMX control and status word */
+    fldcw   0x74(%rdx)              /* restore x87 control word */
+    /* restore XMM storage */
+	/* save start address of SSE register block in R10 */
+    leaq    0x90(%rdx), %r10
+    /* shift address in R10 to lower 16 byte boundary */
+    /* == pointer to SEE register block */
+    andq    $-16,       %r10
+
+    movaps  (%r10),     %xmm6
+    movaps  0x10(%r10), %xmm7
+    movaps  0x20(%r10), %xmm8
+    movaps  0x30(%r10), %xmm9
+    movaps  0x40(%r10), %xmm10
+    movaps  0x50(%r10), %xmm11
+    movaps  0x60(%r10), %xmm12
+    movaps  0x70(%r10), %xmm13
+    movaps  0x80(%r10), %xmm14
+    movaps  0x90(%r10), %xmm15
+
+1:
+    leaq    0x08(%rsp), %rax        /* exclude the return address */
+    movq    %rax,       0x40(%rcx)  /* save as stack pointer */
+    movq    (%rsp),     %rax        /* load return address */
+    movq    %rax,       0x48(%rcx)  /* save return address */
+
+    movq    (%rdx),     %r12        /* restore R12 */
+    movq    0x08(%rdx), %r13        /* restore R13 */
+    movq    0x10(%rdx), %r14        /* restore R14 */
+    movq    0x18(%rdx), %r15        /* restore R15 */
+    movq    0x20(%rdx), %rdi        /* restore RDI */
+    movq    0x28(%rdx), %rsi        /* restore RSI */
+    movq    0x30(%rdx), %rbx        /* restore RBX */
+    movq    0x38(%rdx), %rbp        /* restore RBP */
+
+    movq    %gs:(0x30), %r10        /* load NT_TIB */
+    movq    0x50(%rdx), %rax        /* load stack base */
+    movq    %rax,       0x08(%r10)  /* restore stack base */
+    movq    0x60(%rdx), %rax        /* load stack limit */
+    movq    %rax,       0x10(%r10)  /* restore stack limit */
+    movq    0x68(%rdx), %rax        /* load fiber local storage */
+    movq    %rax,       0x18(%r10)  /* restore fiber local storage */
+
+    movq    0x40(%rdx), %rsp        /* restore RSP */
+    movq    0x48(%rdx), %r10        /* fetch the address to returned to */
+
+    movq    %r8,        %rax        /* use third arg as return value after jump */
+    movq    %r8,        %rcx        /* use third arg as first arg in context function */
+
+    jmp     *%r10                   /* indirect jump to caller */
+.seh_endproc
