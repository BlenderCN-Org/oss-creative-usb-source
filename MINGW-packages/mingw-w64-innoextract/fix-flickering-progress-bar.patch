From a144d3fff0e94e19acc098ee4b35503aaeb752ae Mon Sep 17 00:00:00 2001
From: Daniel Scharrer <daniel@constexpr.org>
Date: Tue, 14 May 2013 20:10:56 +0200
Subject: [PATCH] Fix flickering progress bar under Windows

---
 src/cli/main.cpp     | 68 +++++++++++++++++++++++++++-------------------------
 src/util/console.cpp | 65 +++++++++++++++++++++++++++++--------------------
 src/util/console.hpp | 13 +++++++---
 3 files changed, 84 insertions(+), 62 deletions(-)

diff --git a/src/cli/main.cpp b/src/cli/main.cpp
index b4c72aa..3f90291 100644
--- a/src/cli/main.cpp
+++ b/src/cli/main.cpp
@@ -326,49 +326,48 @@ static void process_file(const fs::path & file, const options & o) {
 			}
 			
 			// Print filename and size
-			if(!o.silent) {
+			if(o.list) {
 				
 				extract_progress.clear();
 				
-				std::cout << " - ";
-				bool named = false;
-				BOOST_FOREACH(const file_t & path, output_names) {
-					if(named) {
-						std::cout << ", ";
+				if(!o.silent) {
+					
+					std::cout << " - ";
+					bool named = false;
+					BOOST_FOREACH(const file_t & path, output_names) {
+						if(named) {
+							std::cout << ", ";
+						}
+						std::cout << '"' << color::white << path.first << color::reset << '"';
+						if(!info.files[path.second].languages.empty()) {
+							std::cout << " [" << color::green << info.files[path.second].languages
+							          << color::reset << "]";
+						}
+						named = true;
 					}
-					std::cout << '"' << color::white << path.first << color::reset << '"';
-					if(!info.files[path.second].languages.empty()) {
-						std::cout << " [" << color::green << info.files[path.second].languages
-						          << color::reset << "]";
+					if(!named) {
+						std::cout << color::white << "unnamed file" << color::reset;
 					}
-					named = true;
-				}
-				if(!named) {
-					std::cout << color::white << "unnamed file" << color::reset;
-				}
-				if(!o.quiet) {
-					if(logger::debug) {
-						std::cout << " @ " << print_hex(file.offset);
+					if(!o.quiet) {
+						if(logger::debug) {
+							std::cout << " @ " << print_hex(file.offset);
+						}
+						std::cout << " (" << color::dim_cyan << print_bytes(file.size)
+						          << color::reset << ")";
+					}
+					std::cout << '\n';
+					
+				} else {
+					BOOST_FOREACH(const file_t & path, output_names) {
+						std::cout << color::white << path.first << color::reset << '\n';
 					}
-					std::cout << " (" << color::dim_cyan << print_bytes(file.size)
-					          << color::reset << ")";
-				}
-				std::cout << '\n';
-				if(o.extract || o.test) {
-					std::cout.flush();
 				}
 				
-				extract_progress.update(0, true);
-				
-			} else if(o.list) {
-				extract_progress.clear();
-				BOOST_FOREACH(const file_t & path, output_names) {
-					std::cout << color::white << path.first << color::reset << '\n';
-				}
-				if(o.extract || o.test) {
+				bool updated = extract_progress.update(0, true);
+				if(!updated && (o.extract || o.test)) {
 					std::cout.flush();
 				}
-				extract_progress.update(0, true);
+				
 			}
 			
 			if(!o.extract && !o.test) {
@@ -568,6 +567,9 @@ int main(int argc, char * argv[]) {
 	if(!o.extract && !o.test) {
 		progress::set_enabled(false);
 	}
+	if(!o.silent) {
+		o.list = true;
+	}
 	
 	// Additional actions.
 	o.filenames.set_expand(options.count("dump") == 0);
diff --git a/src/util/console.cpp b/src/util/console.cpp
index 0f052c0..9129056 100644
--- a/src/util/console.cpp
+++ b/src/util/console.cpp
@@ -184,13 +184,6 @@ void init(is_enabled color, is_enabled progress) {
 		show_progress = true;
 	}
 	#endif
-	#if defined(_WIN32)
-	if(show_progress) {
-		// Buffer output so that the progress bar won't flicker (we flush after each update)
-		static char buffer[BUFSIZ];
-		std::setbuf(stdout, buffer);
-	}
-	#endif
 	
 	// Initialize color output
 	
@@ -214,7 +207,7 @@ void init(is_enabled color, is_enabled progress) {
 	} else {
 		
 		#if defined(_WIN32)
-		// Preserve the original background color if it isn't too bright.
+		// Preserve the original background color if it isn't too bright
 		if(!(original_color.command & (COMMON_LVB_REVERSE_VIDEO|BACKGROUND_INTENSITY))) {
 			boost::uint16_t bgmask = BACKGROUND_RED | BACKGROUND_GREEN | BACKGROUND_BLUE;
 			if((color & bgmask) != bgmask) {
@@ -224,7 +217,7 @@ void init(is_enabled color, is_enabled progress) {
 				}
 			}
 		}
-		// Force dim_white as the default color under Windows, restore original color on exit.
+		// Force dim_white as the default color under Windows, restore original color on exit
 		std::cout << reset;
 		std::atexit(restore_color);
 		#endif
@@ -288,7 +281,7 @@ static int get_screen_width() {
 
 static bool progress_cleared = true;
 
-int progress::clear() {
+int progress::clear(bool reset_only) {
 	
 	int width = get_screen_width();
 	
@@ -298,18 +291,37 @@ int progress::clear() {
 	
 	#if defined(_WIN32)
 	
-	// Overwrite the current line with whitespace
-	
-	static std::string buffer;
-	static int last_width = 0;
-	if(width != last_width) {
-		size_t cwidth = size_t(std::max(width, 1) - 1);
-		buffer.resize(cwidth, ' ');
-		last_width = width;
+	if(reset_only) {
+		
+		/*
+		 * If we overwrite the whole line with spaces, windows console likes to draw
+		 * the empty line, even if it will be overwritten in the same flush(),
+		 * causing the progress bar to flicker when updated.
+		 * To work around this, don't actually clear the line if we are just going to
+		 * overwrite it anyway.
+		 * The progress bar still flickers when there is other output printed, but
+		 * it seems there is no way around that without using the console API to manually
+		 * scroll the output.
+		 */
+		
+		std::cout << '\r';
+		
+	} else {
+		
+		// Overwrite the current line with whitespace
+		
+		static std::string buffer;
+		static int last_width = 0;
+		if(width != last_width) {
+			size_t cwidth = size_t(std::max(width, 1) - 1);
+			buffer.resize(cwidth, ' ');
+			last_width = width;
+		}
+		
+		std::cout << '\r' << buffer << '\r';
+		
 	}
 	
-	std::cout << '\r' << buffer << '\r';
-	
 	#else
 	
 	// Use the ANSI/VT100 control sequence to clear the current line
@@ -329,7 +341,7 @@ void progress::show(float value, const std::string & label) {
 		return;
 	}
 	
-	int width = clear();
+	int width = clear(true);
 	
 	std::ios_base::fmtflags flags = std::cout.flags();
 	
@@ -366,7 +378,7 @@ void progress::show_unbounded(float value, const std::string & label) {
 		return;
 	}
 	
-	int width = clear();
+	int width = clear(true);
 	
 	std::ios_base::fmtflags flags = std::cout.flags();
 	
@@ -402,10 +414,10 @@ progress::progress(boost::uint64_t max, bool show_rate)
 	  start_time(boost::posix_time::microsec_clock::universal_time()),
 	  last_status(-1.f), last_time(0), last_rate(0.f) { }
 
-void progress::update(boost::uint64_t delta, bool force) {
+bool progress::update(boost::uint64_t delta, bool force) {
 	
 	if(!show_progress) {
-		return;
+		return false;
 	}
 	
 	force = force || progress_cleared;
@@ -417,7 +429,7 @@ void progress::update(boost::uint64_t delta, bool force) {
 		status = float(std::min(value, max)) / float(max);
 		status = float(size_t(1000.f * status)) * (1.f / 1000.f);
 		if(!force && status == last_status) {
-			return;
+			return false;
 		}
 	}
 	
@@ -430,7 +442,7 @@ void progress::update(boost::uint64_t delta, bool force) {
 	const boost::uint64_t update_interval = 50000;
 	#endif
 	if(!force && time - last_time < update_interval) {
-		return;
+		return false;
 	}
 	
 	last_time = time;
@@ -461,6 +473,7 @@ void progress::update(boost::uint64_t delta, bool force) {
 		show_unbounded(status, label.str());
 	}
 	
+	return true;
 }
 
 void progress::set_enabled(bool enable) {
diff --git a/src/util/console.hpp b/src/util/console.hpp
index 1f8354c..4c6875d 100644
--- a/src/util/console.hpp
+++ b/src/util/console.hpp
@@ -132,8 +132,10 @@ public:
 	 *              maximum set in the constructor, the bar will be full.
 	 * \param force Force updating the progress bar. Normally, the progress bar. Otherwise,
 	 *              updates are rate-limited and small deltas are not displayed immediately.
+	 *
+	 * \return true if the progres bar was updated
 	 */
-	void update(boost::uint64_t delta = 0, bool force = false);
+	bool update(boost::uint64_t delta = 0, bool force = false);
 	
 	/*!
 	 * Draw a bounded progress bar (with a maximum).
@@ -151,8 +153,13 @@ public:
 	 */
 	static void show_unbounded(float value, const std::string & label = std::string());
 	
-	//! Clear any progress bar to make way for other output.
-	static int clear();
+	/*!
+	 * Clear any progress bar to make way for other output.
+	 *
+	 * \param reset_only Only reset the cursor if cleaning the line is expensive.
+	 *                   This should be used if the whole line will be written anyway.
+	 */
+	static int clear(bool reset_only = false);
 	
 	//! Enable or disable the progress bar.
 	static void set_enabled(bool enable);
-- 
1.9.1

