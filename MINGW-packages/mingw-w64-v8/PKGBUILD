# Maintainer: Martell Malone <martellmalone@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>

_realname=v8

pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
pkgver=3.27.34.6
pkgrel=2
pkgdesc="Fast and modern Javascript engine (mingw-w64)"
arch=('any')
url="http://code.google.com/p/v8"
license=("BSD")
makedepends=("gyp-svn")
depends=("${MINGW_PACKAGE_PREFIX}-readline"
         "${MINGW_PACKAGE_PREFIX}-icu")
options=('!emptydirs' '!strip')
source=("https://github.com/v8/v8/archive/${pkgver}.tar.gz"
        "0000-Disable-USING_V8_SHARED-for-v8_snapshot-static-lib.patch"
        "0001-Include-win32-headers-h-before-undef-MemoryBarrier.patch"
        "0002-OS-TotalPhysicalMemory-needed-for-MinGW-w64-too.patch"
        "0003-Use-soname_version.dll-not-so.soname_version-on-Windows.patch"
        "0004-Create-an-import-library-on-Windows.patch"
        "0005-Use-gnuish-ccflags-for-gcc-on-Windows.patch"
        "0006-localtime_s-is-not-needed-for-mingw-w64.patch"
        "v8.pc")
md5sums=('2e9069c38a985150e6d4d7af2f38689d'
         'd13060d09d6a8cbf3da5d0ec773f8e57'
         'f341d18574cc16df53287fe9cccdf75b'
         '26a61fe54cee6bd135d9b8633d4413d2'
         'cc9c6d019cc3ac025d2ec76507a68ba1'
         '4e444573e7cfba10b12e56a02c6503ff'
         'f447bd43d7bb79f7a6b0fcf5dfdb24e1'
         'cf011b3a22124efad02ef190ae143b8f'
         '02a39154c246e03d8f8e745454c1619c')

prepare() {
  cd ${srcdir}/v8-${pkgver}
  patch -p1 -i ${srcdir}/0000-Disable-USING_V8_SHARED-for-v8_snapshot-static-lib.patch
  patch -p1 -i ${srcdir}/0001-Include-win32-headers-h-before-undef-MemoryBarrier.patch
  patch -p1 -i ${srcdir}/0002-OS-TotalPhysicalMemory-needed-for-MinGW-w64-too.patch
  patch -p1 -i ${srcdir}/0003-Use-soname_version.dll-not-so.soname_version-on-Windows.patch
  patch -p1 -i ${srcdir}/0004-Create-an-import-library-on-Windows.patch
  patch -p1 -i ${srcdir}/0005-Use-gnuish-ccflags-for-gcc-on-Windows.patch
  patch -p1 -i ${srcdir}/0006-localtime_s-is-not-needed-for-mingw-w64.patch

  msg 'Fixing: python -> python2'
  #find -type f -exec sed -e 's_^#!/usr/bin/env python$_&2_' -e 's_^\(#!/usr/bin/env python2\).[45]$_\1_' -e 's_^#!/usr/bin/python$_&2_' -e "s_'python'_'python2'_" -i {} \;
  find test -type f -exec sed -e "s|python |python2 |" -i {} \;
  sed -i "s|python |python2 |" Makefile

  sed "s/@VERSION@/$pkgver/g" -i "$srcdir/v8.pc"
  sed "s|^prefix=.*|prefix=${MINGW_PREFIX}|g" -i "$srcdir/v8.pc"
}

build() {
  local BUILDTYPE=Release
  if check_option "debug" "y"; then
    BUILDTYPE="Debug"
  fi

  export PYTHON=/usr/bin/python2

  mkdir -p "${srcdir}/build-${CARCH}"

  case ${CARCH} in
    i686)
      _arch=ia32
    ;;
    x86_64)
      _arch=x64
    ;;
  esac
  cd "${srcdir}/v8-${pkgver}"

  GYP_GENERATORS=make \
    $PYTHON build/gyp_v8 \
      -Dv8_enable_i18n_support=true \
      -Duse_system_icu=1 \
      -Dconsole=readline \
      -Dcomponent=shared_library \
      -Dsoname_version=${pkgver} \
      -Dv8_target_arch=${_arch} \
      --generator-output=out \
      -f make

  LINK=g++ make -C out builddir="${PWD}/out/${BUILDTYPE}-${CARCH}" BUILDTYPE=${BUILDTYPE} mksnapshot V=1
  LINK=g++ make -C out builddir="${PWD}/out/${BUILDTYPE}-${CARCH}" BUILDTYPE=${BUILDTYPE} V=1
}

check() {
  cd "${_realname}-${pkgver}"
  local BUILDTYPE=Release
  if check_option "debug" "y"; then
    BUILDTYPE="Debug"
  fi
#  tools/run-tests.py --no-presubmit --outdir=out --buildbot --arch=$ARCH --mode=${BUILDTYPE} --progress=dots
}

package() {
  cd "${_realname}-${pkgver}"
  local BUILDTYPE=Release
  if check_option "debug" "y"; then
    BUILDTYPE="Debug"
  fi

  install -d "$pkgdir"/${MINGW_PREFIX}/bin
  install -Dm755 out/${BUILDTYPE}-${CARCH}/d8 "$pkgdir"/${MINGW_PREFIX}/bin/d8
  install -Dm755 out/${BUILDTYPE}-${CARCH}/lib.target/*.dll "$pkgdir"/${MINGW_PREFIX}/bin/

  install -d "$pkgdir"/${MINGW_PREFIX}/lib
  install -Dm755 out/${BUILDTYPE}-${CARCH}/*.a "$pkgdir"/${MINGW_PREFIX}/lib/

  install -d "$pkgdir"/${MINGW_PREFIX}/include
  install -Dm644 include/*.h "$pkgdir"/${MINGW_PREFIX}/include

  install -d "$pkgdir"/${MINGW_PREFIX}/lib/pkgconfig
  install -m644 "$srcdir/v8.pc" "$pkgdir"/${MINGW_PREFIX}/lib/pkgconfig/

  install -d "$pkgdir"/${MINGW_PREFIX}/share/licenses/v8
  install -m644 LICENSE* "$pkgdir"/${MINGW_PREFIX}/share/licenses/v8
}
