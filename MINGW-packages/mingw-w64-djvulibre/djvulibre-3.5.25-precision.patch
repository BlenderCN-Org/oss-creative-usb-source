--- djvulibre-3.5.25/libdjvu/DjVuPort.cpp	2012-03-17 23:49:02.000000000 +0100
+++ djvulibre-3.5.25/libdjvu/DjVuPort.cpp	2012-04-05 11:11:53.983644255 +0200
@@ -466,11 +466,11 @@
        // Sort in depth order
        int max_dist=0;
        for(pos=set;pos;++pos)
-         if (max_dist < (int)(long)set[pos])
-           max_dist = (int)(long)set[pos];
+         if (max_dist < (int)(size_t)set[pos])
+           max_dist = (int)(size_t)set[pos];
        GArray<GList<const void*> > lists(0,max_dist);
        for(pos=set;pos;++pos)
-         lists[(int)(long)set[pos]].append(set.key(pos));
+         lists[(int)(size_t)set[pos]].append(set.key(pos));
        for(int dist=0;dist<=max_dist;dist++)
          for(pos=lists[dist];pos;++pos)
            {
--- djvulibre-3.5.25/libdjvu/GBitmap.cpp	2012-03-17 23:49:02.000000000 +0100
+++ djvulibre-3.5.25/libdjvu/GBitmap.cpp	2012-04-05 11:11:53.983644255 +0200
@@ -469,7 +469,7 @@
 {
   if (!monitorptr)
     {
-      unsigned long x = (unsigned long)this;
+      size_t x = (size_t)this;
       monitorptr = &monitors[(x^(x>>5)) % NMONITORS];
     }
 }
--- djvulibre-3.5.25/libdjvu/GContainer.h	2012-03-17 23:49:02.000000000 +0100
+++ djvulibre-3.5.25/libdjvu/GContainer.h	2012-04-05 11:11:53.984644229 +0200
@@ -178,7 +178,7 @@
 static inline unsigned int 
 hash(const void * const & x) 
 { 
-  return (unsigned long) x; 
+  return (unsigned long)((size_t) x); 
 }
 
 /** Hashing function (float). */
--- djvulibre-3.5.25/libdjvu/IW44EncodeCodec.cpp	2012-03-17 23:49:02.000000000 +0100
+++ djvulibre-3.5.25/libdjvu/IW44EncodeCodec.cpp	2012-04-05 11:10:49.230256891 +0200
@@ -310,7 +310,7 @@
 static inline void
 mmx_fv_1 ( short* &q, short* e, int s, int s3 )
 {
-  while (q<e && (((long)q)&0x7))
+  while (q<e && (((intptr_t)q)&0x7))
     {
       int a = (int)q[-s] + (int)q[s];
       int b = (int)q[-s3] + (int)q[s3];
@@ -353,7 +353,7 @@
 static inline void
 mmx_fv_2 ( short* &q, short* e, int s, int s3 )
 {
-  while (q<e && (((long)q)&0x7))
+  while (q<e && (((intptr_t)q)&0x7))
     {
       int a = (int)q[-s] + (int)q[s];
       int b = (int)q[-s3] + (int)q[s3];
--- djvulibre-3.5.25/libdjvu/IW44Image.cpp	2012-03-17 23:49:02.000000000 +0100
+++ djvulibre-3.5.25/libdjvu/IW44Image.cpp	2012-04-05 11:11:53.985644203 +0200
@@ -167,7 +167,7 @@
 static void
 mmx_bv_1 ( short* &q, short* e, int s, int s3 )
 {
-  while (q<e && (((long)q)&0x7))
+  while (q<e && (((intptr_t)q)&0x7))
     {
       int a = (int)q[-s] + (int)q[s];
       int b = (int)q[-s3] + (int)q[s3];
@@ -211,7 +211,7 @@
 static void
 mmx_bv_2 ( short* &q, short* e, int s, int s3 )
 {
-  while (q<e && (((long)q)&0x7))
+  while (q<e && (((intptr_t)q)&0x7))
     {
       int a = (int)q[-s] + (int)q[s];
       int b = (int)q[-s3] + (int)q[s3];
@@ -649,7 +649,7 @@
   // Allocate enough room for pointers plus alignment
   short *p = alloc( (n+1) * sizeof(short*) / sizeof(short) );
   // Align on pointer size
-  while ( ((long)p) & (sizeof(short*)-1) )
+  while ( ((size_t)p) & (sizeof(short*)-1) )
     p += 1;
   // Cast and return
   return (short**)p;
