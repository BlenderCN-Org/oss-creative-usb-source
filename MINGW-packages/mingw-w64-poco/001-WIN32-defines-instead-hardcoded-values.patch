From 0076696d40057a76369c134234e4d4f3a5ea0204 Mon Sep 17 00:00:00 2001
From: Luigi 'Comio' Mantellini <luigi.mantellini@gmail.com>
Date: Fri, 21 Mar 2014 15:45:26 +0100
Subject: [PATCH] WIN32: Use WIN32's defines instead hardcoded values.

---
 Foundation/src/File_WIN32.cpp  | 12 ++++++------
 Foundation/src/File_WIN32U.cpp | 14 +++++++-------
 Foundation/src/File_WINCE.cpp  | 12 ++++++------
 3 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/Foundation/src/File_WIN32.cpp b/Foundation/src/File_WIN32.cpp
index a338c68..0ac24ea 100644
--- a/Foundation/src/File_WIN32.cpp
+++ b/Foundation/src/File_WIN32.cpp
@@ -112,7 +112,7 @@ bool FileImpl::existsImpl() const
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributes(_path.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 	{
 		switch (GetLastError())
 		{
@@ -134,7 +134,7 @@ bool FileImpl::canReadImpl() const
 	poco_assert (!_path.empty());
 	
 	DWORD attr = GetFileAttributes(_path.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 	{
 		switch (GetLastError())
 		{
@@ -153,7 +153,7 @@ bool FileImpl::canWriteImpl() const
 	poco_assert (!_path.empty());
 	
 	DWORD attr = GetFileAttributes(_path.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	return (attr & FILE_ATTRIBUTE_READONLY) == 0;
 }
@@ -177,7 +177,7 @@ bool FileImpl::isDirectoryImpl() const
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributes(_path.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	return (attr & FILE_ATTRIBUTE_DIRECTORY) != 0;
 }
@@ -210,7 +210,7 @@ bool FileImpl::isHiddenImpl() const
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributes(_path.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	return (attr & FILE_ATTRIBUTE_HIDDEN) != 0;
 }
@@ -275,7 +275,7 @@ void FileImpl::setSizeImpl(FileSizeImpl size)
 	FileHandle fh(_path, GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, OPEN_EXISTING);
 	LARGE_INTEGER li;
 	li.QuadPart = size;
-	if (SetFilePointer(fh.get(), li.LowPart, &li.HighPart, FILE_BEGIN) == -1)
+	if (SetFilePointer(fh.get(), li.LowPart, &li.HighPart, FILE_BEGIN) == INVALID_SET_FILE_POINTER)
 		handleLastErrorImpl(_path);
 	if (SetEndOfFile(fh.get()) == 0) 
 		handleLastErrorImpl(_path);
diff --git a/Foundation/src/File_WIN32U.cpp b/Foundation/src/File_WIN32U.cpp
index 6148cfe..23c29d1 100644
--- a/Foundation/src/File_WIN32U.cpp
+++ b/Foundation/src/File_WIN32U.cpp
@@ -116,7 +116,7 @@ bool FileImpl::existsImpl() const
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 	{
 		switch (GetLastError())
 		{
@@ -138,7 +138,7 @@ bool FileImpl::canReadImpl() const
 	poco_assert (!_path.empty());
 	
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 	{
 		switch (GetLastError())
 		{
@@ -157,7 +157,7 @@ bool FileImpl::canWriteImpl() const
 	poco_assert (!_path.empty());
 	
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	return (attr & FILE_ATTRIBUTE_READONLY) == 0;
 }
@@ -181,7 +181,7 @@ bool FileImpl::isDirectoryImpl() const
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	return (attr & FILE_ATTRIBUTE_DIRECTORY) != 0;
 }
@@ -214,7 +214,7 @@ bool FileImpl::isHiddenImpl() const
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	return (attr & FILE_ATTRIBUTE_HIDDEN) != 0;
 }
@@ -279,7 +279,7 @@ void FileImpl::setSizeImpl(FileSizeImpl size)
 	FileHandle fh(_path, _upath, GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, OPEN_EXISTING);
 	LARGE_INTEGER li;
 	li.QuadPart = size;
-	if (SetFilePointer(fh.get(), li.LowPart, &li.HighPart, FILE_BEGIN) == -1)
+	if (SetFilePointer(fh.get(), li.LowPart, &li.HighPart, FILE_BEGIN) == INVALID_SET_FILE_POINTER)
 		handleLastErrorImpl(_path);
 	if (SetEndOfFile(fh.get()) == 0) 
 		handleLastErrorImpl(_path);
@@ -291,7 +291,7 @@ void FileImpl::setWriteableImpl(bool flag)
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == -1)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	if (flag)
 		attr &= ~FILE_ATTRIBUTE_READONLY;
diff --git a/Foundation/src/File_WINCE.cpp b/Foundation/src/File_WINCE.cpp
index d6c6fde..885b8e2 100644
--- a/Foundation/src/File_WINCE.cpp
+++ b/Foundation/src/File_WINCE.cpp
@@ -117,7 +117,7 @@ bool FileImpl::existsImpl() const
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 	{
 		switch (GetLastError())
 		{
@@ -139,7 +139,7 @@ bool FileImpl::canReadImpl() const
 	poco_assert (!_path.empty());
 	
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 	{
 		switch (GetLastError())
 		{
@@ -158,7 +158,7 @@ bool FileImpl::canWriteImpl() const
 	poco_assert (!_path.empty());
 	
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	return (attr & FILE_ATTRIBUTE_READONLY) == 0;
 }
@@ -182,7 +182,7 @@ bool FileImpl::isDirectoryImpl() const
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	return (attr & FILE_ATTRIBUTE_DIRECTORY) != 0;
 }
@@ -205,7 +205,7 @@ bool FileImpl::isHiddenImpl() const
 	poco_assert (!_path.empty());
 
 	DWORD attr = GetFileAttributesW(_upath.c_str());
-	if (attr == 0xFFFFFFFF)
+	if (attr == INVALID_FILE_ATTRIBUTES)
 		handleLastErrorImpl(_path);
 	return (attr & FILE_ATTRIBUTE_HIDDEN) != 0;
 }
@@ -270,7 +270,7 @@ void FileImpl::setSizeImpl(FileSizeImpl size)
 	FileHandle fh(_path, _upath, GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, OPEN_EXISTING);
 	LARGE_INTEGER li;
 	li.QuadPart = size;
-	if (SetFilePointer(fh.get(), li.LowPart, &li.HighPart, FILE_BEGIN) == -1)
+	if (SetFilePointer(fh.get(), li.LowPart, &li.HighPart, FILE_BEGIN) == INVALID_SET_FILE_POINTER)
 		handleLastErrorImpl(_path);
 	if (SetEndOfFile(fh.get()) == 0) 
 		handleLastErrorImpl(_path);
