diff -urN cmake-3.1.0.orig/Source/cmGlobalGenerator.cxx cmake-3.1.0/Source/cmGlobalGenerator.cxx
--- cmake-3.1.0.orig/Source/cmGlobalGenerator.cxx	2015-01-03 16:49:13.831653600 +0000
+++ cmake-3.1.0/Source/cmGlobalGenerator.cxx	2015-01-03 15:44:34.928951000 +0000
@@ -1392,7 +1392,8 @@
         {
         if((target.GetPropertyAsBool("AUTOMOC")
               || target.GetPropertyAsBool("AUTOUIC")
-              || target.GetPropertyAsBool("AUTORCC"))
+              || target.GetPropertyAsBool("AUTORCC")
+              || target.GetPropertyAsBool("AUTOSTATICPLUGINS"))
             && !target.IsImported())
           {
           cmQtAutoGenerators autogen;
diff -urN cmake-3.1.0.orig/Source/cmQtAutoGenerators.cxx cmake-3.1.0/Source/cmQtAutoGenerators.cxx
--- cmake-3.1.0.orig/Source/cmQtAutoGenerators.cxx	2015-01-03 16:49:13.862853600 +0000
+++ cmake-3.1.0/Source/cmQtAutoGenerators.cxx	2015-01-03 17:03:44.895400500 +0000
@@ -31,6 +31,7 @@
 #include <unistd.h>
 #endif
 
+#include <cmGeneratedFileStream.h>
 #include "cmQtAutoGenerators.h"
 
 
@@ -151,7 +152,7 @@
 static std::string getAutogenTargetName(cmTarget const* target)
 {
   std::string autogenTargetName = target->GetName();
-  autogenTargetName += "_automoc";
+  autogenTargetName += "_autogen";
   return autogenTargetName;
 }
 
@@ -193,6 +194,7 @@
 
     target->AddSource(mocCppFile);
     }
+
   // create a custom target for running generators at buildtime:
   std::string autogenTargetName = getAutogenTargetName(target);
 
@@ -230,7 +232,13 @@
     {
     toolNames.push_back("rcc");
     }
-
+  /* AUTOSTATICPLUGINS .cpp files are created at cmake execution time,
+   * and not at build time, so in that case it is possible to get here
+   * with no toolNames. */
+  if (!toolNames.size())
+    {
+    return true;
+    }
   std::string tools = toolNames[0];
   toolNames.erase(toolNames.begin());
   while (toolNames.size() > 1)
@@ -393,7 +401,9 @@
 
   if (target->GetPropertyAsBool("AUTOMOC")
       || target->GetPropertyAsBool("AUTOUIC")
-      || target->GetPropertyAsBool("AUTORCC"))
+      || target->GetPropertyAsBool("AUTORCC")
+      || (    target->GetPropertyAsBool("AUTOSTATICPLUGINS")
+           && target->GetType() == cmTarget::EXECUTABLE))
     {
     this->SetupSourceFiles(target);
     }
@@ -554,6 +564,57 @@
     {
     const_cast<cmTarget*>(target)->AddSource(*fileIt);
     }
+
+  /* in qt5-static/lib/cmake/Qt5Core/Qt5CoreConfig.cmake, macro(_populate_Core_plugin_properties ..), we'd have:
+   * set_property(TARGET PROPERTY AUTOSTATICPLUGINS True) // Not currently need as defaults to "ON"
+   * set_property(TARGET Qt5::Core APPEND PROPERTY STATIC_PLUGINS ${Plugin})
+   */
+  if (target->GetPropertyAsBool("AUTOSTATICPLUGINS"))
+    {
+    std::vector<cmTarget const*> libTargets = target->GetLinkImplementationClosure("");
+    std::vector<cmTarget const*>::const_iterator li;
+    std::vector<std::string> staticPlugins;
+    for (li = libTargets.begin(); li != libTargets.end(); ++li)
+      {
+      cmTarget const* tgt = *li;
+      const char *staticPluginsProp = tgt->GetProperty("STATIC_PLUGINS");
+      if (staticPluginsProp)
+        {
+        std::vector<std::string> staticPluginsTgt = cmSystemTools::tokenize(staticPluginsProp, ";");
+        for (std::vector<std::string>::const_iterator spti = staticPluginsTgt.begin(); spti != staticPluginsTgt.end(); ++spti)
+          {
+          if (std::find(staticPlugins.begin(), staticPlugins.end(), *spti) == staticPlugins.end())
+            {
+            staticPlugins.push_back(*spti);
+            }
+          }
+        }
+      }
+
+    if (staticPlugins.size())
+      {
+      std::string static_plugins_output_dir = target->GetSupportDirectory();
+      cmSystemTools::MakeDirectory(static_plugins_output_dir.c_str());
+      std::string static_plugins_output_file = static_plugins_output_dir;
+      static_plugins_output_file += "/" + target->GetName() + "_plugin_import.cpp";
+      cmGeneratedFileStream
+        staticPluginsFileStream(static_plugins_output_file.c_str());
+      if(staticPluginsFileStream)
+        {
+        staticPluginsFileStream << "// This file is autogenerated by cmake. It imports static plugin classes for" << std::endl;
+        staticPluginsFileStream << "// static plugins specified using QTPLUGIN and QT_PLUGIN_CLASS.<plugin> variables." << std::endl;
+        staticPluginsFileStream << "#include <QtPlugin>" << std::endl;
+        for (std::vector<std::string>::const_iterator spti = staticPlugins.begin(); spti != staticPlugins.end(); ++spti)
+          {
+          staticPluginsFileStream << "Q_IMPORT_PLUGIN(" << *spti << ")" << std::endl;
+          }
+        staticPluginsFileStream.Close();
+        makefile->AppendProperty("ADDITIONAL_MAKE_CLEAN_FILES",
+                                static_plugins_output_file.c_str(), false);
+        const_cast<cmTarget*>(target)->AddSource(static_plugins_output_file);
+        }
+      }
+    }
 }
 
 void cmQtAutoGenerators::SetupAutoMocTarget(cmTarget const* target,
diff -urN cmake-3.1.0.orig/Source/cmTarget.cxx cmake-3.1.0/Source/cmTarget.cxx
--- cmake-3.1.0.orig/Source/cmTarget.cxx	2015-01-03 16:49:13.862853600 +0000
+++ cmake-3.1.0/Source/cmTarget.cxx	2015-01-03 15:44:35.006951100 +0000
@@ -342,6 +342,7 @@
     this->SetPropertyDefault("AUTOMOC", 0);
     this->SetPropertyDefault("AUTOUIC", 0);
     this->SetPropertyDefault("AUTORCC", 0);
+    this->SetPropertyDefault("AUTOSTATICPLUGINS", 0);
     this->SetPropertyDefault("AUTOMOC_MOC_OPTIONS", 0);
     this->SetPropertyDefault("AUTOUIC_OPTIONS", 0);
     this->SetPropertyDefault("AUTORCC_OPTIONS", 0);
@@ -1727,6 +1728,7 @@
     builtIns.insert("IMPORTED");
     builtIns.insert("NAME");
     builtIns.insert("TYPE");
+    builtIns.insert("STATIC_PLUGINS");
     }
 
   if (builtIns.count(prop))
